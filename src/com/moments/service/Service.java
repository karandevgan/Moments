package com.moments.service;

import java.io.File;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;

import org.hibernate.NonUniqueObjectException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.cloudinary.Api;
import com.cloudinary.ArchiveParams;
import com.cloudinary.Cloudinary;
import com.cloudinary.Transformation;
import com.cloudinary.utils.ObjectUtils;
import com.moments.Dao.AlbumDao;
import com.moments.Dao.PhotoDao;
import com.moments.Dao.TokenDao;
import com.moments.Dao.UserDao;
import com.moments.model.Album;
import com.moments.model.Photo;
import com.moments.model.Token;
import com.moments.model.User;

@Transactional
public class Service {
	@Autowired
	private UserDao userDao;

	@Autowired
	private PhotoDao photoDao;

	@Autowired
	private AlbumDao albumDao;

	@Autowired
	private TokenDao tokenDao;

	@SuppressWarnings("rawtypes")
	private Map config = ObjectUtils.asMap("cloud_name", System.getenv().get("CLOUD_NAME"), "api_key",
			System.getenv().get("API_KEY"), "api_secret", System.getenv().get("API_SECRET"));

	public boolean save(User user) {
		return userDao.save(user);

	}

	public boolean isRegistered(String username) {
		return userDao.isRegistered(username);

	}

	public boolean isEmailRegistered(String email) {
		return userDao.isEmailRegistered(email);
	}

	public User getUser(User user) {
		return userDao.getUser(user);
	}

	public User getUser(String username) {
		return userDao.getUser(username);
	}

	public List<Photo> getTotalPhotos(User user, int call) {
		return photoDao.getTotalPhotos(user, call);
	}

	public Album getAlbum(int album_id) {
		return albumDao.getAlbum(album_id);
	}

	public Album getAlbum(String album_name, int user_id) {
		return albumDao.getAlbum(album_name, user_id);
	}

	public boolean update(User user) {
		return userDao.update(user);

	}

	public boolean createAlbum(User user, Album album) {
		album.setUser(user);
		album.setCreation_date(new Date());
		album.setLast_modified(new Date());
		album.setCoverphoto("/resources/static/corousel1.jpg");
		album.setUser(user);
		boolean isAlbumSaved = albumDao.save(album);
		user.setNumber_of_albums(user.getNumber_of_albums() + 1);
		boolean isUserUpdated = update(user);
		System.out.println(isAlbumSaved && isUserUpdated);
		return isAlbumSaved && isUserUpdated;
	}

	public boolean deleteAlbum(String album_to_delete, String album_name, User user) {
		Cloudinary cloudinary = new Cloudinary(config);
		Api api = cloudinary.api();
		try {
			api.deleteResourcesByPrefix(album_to_delete, ObjectUtils.emptyMap());
			albumDao.delete(album_name, user.getUser_id());
			user.setNumber_of_albums(user.getNumber_of_albums() - 1);
			update(user);
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	public boolean deletePhoto(String public_id, User user) {
		Cloudinary cloudinary = new Cloudinary(config);
		try {
			if (photoDao.delete(public_id, user.getUser_id()))
				cloudinary.uploader().destroy(public_id, ObjectUtils.emptyMap());
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	@SuppressWarnings("rawtypes")

	public boolean uploadImage(Album album, User user, MultipartFile file) {
		System.out.println("Uploading File.....");
		File temp = null;
		try {
			temp = new File(file.getOriginalFilename());
			file.transferTo(temp);

			String uploadFolder = user.getUsername() + "/" + album.getAlbum_name();
			Map upload_params = ObjectUtils.asMap("folder", uploadFolder);
			Cloudinary cloudinary = new Cloudinary(config);
			// http://res.cloudinary.com/<cloud_name>/<username>/<albumname>/<autogeneratedpublicid>.<extension>

			Map uploadResult = cloudinary.uploader().upload(temp, upload_params);

			String public_id = (String) uploadResult.get("public_id");
			String thumb_url = cloudinary.url().transformation(new Transformation().height(200).crop("scale"))
					.imageTag(public_id).split("'")[1];

			String slide_url = cloudinary.url().transformation(new Transformation().width(800).crop("scale"))
					.imageTag(public_id).split("'")[1];

			Photo photo = new Photo();
			photo.setAlbum(album);
			photo.setCreation_date(new Date());
			photo.setPath(uploadResult.get("url").toString());

			photo.setSlide_path(slide_url);
			photo.setThumb_path(thumb_url);
			photo.setPublic_id(public_id);
			photo.setUser(user);
			photoDao.save(photo);
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		} finally {
			temp.delete();
		}
	}

	public String downloadAlbum(String download_folder) {
		Cloudinary cloudinary = new Cloudinary(config);
		try {
			String[] prefixes = { download_folder };
			String url = cloudinary.downloadArchive(new ArchiveParams().prefixes(prefixes).flattenFolders(true));
			System.out.println(url);
			return url;
		} catch (Exception e) {
			return null;
		}
	}

	public List<Album> getAlbums(int user_id) {
		return albumDao.getAlbums(user_id);
	}

	public List<Photo> getPhotos(String album_name, User user, int call) {
		return photoDao.getPhotos(albumDao.getAlbum(album_name, user.getUser_id()), user, call);
	}

	public List<Photo> getPhotosShared(int album_id, String album_name, int call) {
		Album album = albumDao.getAlbum(album_id, album_name);
		if (album != null)
			return photoDao.getPhotos(album, call);
		else
			return null;
	}

	public boolean isAlbumAvailable(int user_id, String album_name) {
		return albumDao.isAlbumAvailable(user_id, album_name);
	}

	public String getToken(User user) {
		Random random = new SecureRandom();
		String token_value = new BigInteger(1000, random).toString(32);
		Token token = new Token();
		token.setToken_value(token_value);
		token.setCreation_date(new Date());
		token.setExpiry_minutes(60);
		token.setUser(user);
		if (tokenDao.saveToken(token))
			return token_value;
		else
			return null;
	}

	public boolean isTokenValid(String token_value) {
		return tokenDao.isTokenValid(token_value);
	}

	public User getUserFromToken(String token_value) {
		return tokenDao.getUser(token_value);
	}

	public User getUser(String token_value, Object sessionUser) {
		User user = null;
		if (token_value == null) {
			if (sessionUser != null) {
				user = this.getUser(sessionUser.toString());
			}
		} else {
			if (isTokenValid(token_value))
				System.out.println(token_value);
			user = this.getUserFromToken(token_value);
		}
		return user;
	}

	public String getImagePath(String public_id) {
		return photoDao.getImagePath(public_id);
	}

	public void shareAlbumWithUser(int album_id, User share_user) throws NonUniqueObjectException {
		albumDao.shareAlbumWithUser(album_id, share_user);
	}

	public Set<Album> getSharedAlbums(User user) {
		return userDao.getSharedAlbums(user);
	}
}